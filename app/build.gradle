apply plugin: 'com.android.application'

Properties signingProperties = new Properties()
signingProperties.load(new FileInputStream(file("../signings/signing.properties")))

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.sunfusheng.github"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }

    signingConfigs {
        release {
            storeFile file(signingProperties['KEYSTORE_FILEPATH'])
            storePassword signingProperties['STORE_PASSWORD']
            keyAlias signingProperties['KEY_ALIAS']
            keyPassword signingProperties['KEY_PASSWORD']
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "debugMode", "false"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all {
                variant -> generateApk(variant)
            }
        }

        debug {
            buildConfigField "boolean", "debugMode", "true"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all {
                variant -> generateApk(variant)
            }
        }
    }
}

def generateApk(variant) {
    if (variant.buildType.name == "release") {
        variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/app/outputs")
        variant.getPackageApplication().outputScope.apkDatas.forEach { apkData ->
            apkData.outputFileName = "GitHub-${variant.mergedFlavor.versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:design:' + rootProject.supportLibraryVersion
    implementation 'com.android.support:appcompat-v7:' + rootProject.supportLibraryVersion
    implementation 'com.android.support:recyclerview-v7:' + rootProject.supportLibraryVersion
    implementation 'com.android.support:support-v4:' + rootProject.supportLibraryVersion
    implementation 'com.android.support:support-v13:' + rootProject.supportLibraryVersion
    implementation 'com.android.support:animated-vector-drawable:' + rootProject.supportLibraryVersion

    implementation 'android.arch.lifecycle:viewmodel:' + rootProject.lifecycle
    implementation 'android.arch.lifecycle:livedata:' + rootProject.lifecycle
    implementation 'android.arch.lifecycle:extensions:' + rootProject.lifecycle
    implementation 'android.arch.lifecycle:reactivestreams:' + rootProject.lifecycle
    annotationProcessor 'android.arch.lifecycle:compiler:' + rootProject.lifecycle
    implementation 'android.arch.persistence.room:runtime:' + rootProject.room
    implementation 'android.arch.persistence.room:rxjava2:' + rootProject.room
    annotationProcessor 'android.arch.persistence.room:compiler:' + rootProject.room

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'

    implementation 'com.orhanobut:logger:2.2.0'
    implementation 'com.sunfusheng:glideimageview:1.2.0'
    implementation 'com.sunfusheng:FirUpdater:1.0.8'
}
